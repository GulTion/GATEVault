{"path":"Revision/TS/ZealTS/DSA/media/Pasted image 20231114180956.png","text":"Answer: a, b, c, d Solution: a) Depth First Traversal can be used to detect cycle in a Graph. DFS for a connected graph produces a tree. There is a cycle in a graph only if there is a back edge present in the graph. A back edge is an edge that is from a node to itself (self-loop) or one of its ancestor in the tree produced by DFS. b) For a forward edge (u, v) to exist, (u, v) must not be in the BFS tree and u is an ancestor of v in the BFS tree. Thus, d[u] +1<d[v] must hold. That is, there must be at least one vertex in the predecessor path from v to u. Otherwise, it would imply that (u, y) was in the BFS tree and would not be considered a forward edge. c) We can find all strongly connected components in O (V+E) time using Kosarajuâ€™s algorithm. Kosaraju's Algorithm is based on the depth-first search algorithm implemented twice. d) We can modify DFS to find Topological Sorting of a graph. In DFS, we start from a vertex, we first print it and then recursively call DFS for its adjacent vertices.","libVersion":"0.2.3","langs":"eng"}