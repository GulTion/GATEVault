{"path":"Revision/media/ZealRevision/DBMS/media/Pasted image 20231004195905.png","text":"Q18.| Suppose that we have an ordered file with r = 30,000 records stored on a disk with block size B = 1024 bytes. File records are of fixed size and are unspanned, with record length R = 100 bytes. Now suppose that the ordering key field of the file is. V' = 9 bytes long, a block pointer is P = 6 bytes long, and we have constructed a primary index for the file. Let x and y be the number of blocks required to access a record in case of without index and with primary index using binary search respectively. Then the value of x —yis Solution:5 The blocking factor for the file would be bfr =L(B/R)] = L(10241100)) = 10 records per block. The number of block needed for the file is b'= | /b | =[(30000/10)] = 3000 blocks. A binary search on the data file would need approximately [logzb]: [(logz?pOOO)] = 12 block accesses. The size of each index entry is R= (9 + 6) = 15 bytes, so the blocking factor for the index is bfri= L®BR)) = [(1024/15)] = 68 entries per block. The total number of index entries ris equal to the number of blocks in the data file, which is 3000. The number of index blocks is hence b= ity = [ 3000/68)] = 45 blocks. To perform a binary search on the index file would need [(logzb‘)] = [ﬂogz45)] = 6 block accesses. To search for a record using the index, we need one additional block access to the data file for a total of 6 + 1 = 7 block accesses—an improvement over binary searchon the data file, which required 12 disk block accesses. 12-7=5","libVersion":"0.2.3","langs":"eng"}