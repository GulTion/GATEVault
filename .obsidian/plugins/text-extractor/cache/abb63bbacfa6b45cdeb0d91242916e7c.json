{"path":"Revision/TS/ZealTS/FULL/media/Pasted image 20231214130821.png","text":"Assume that in a typical execution of program on a processor, 80% of your instructions are branches. Also assume that every branch misprediction costs you 1 cycles of stall on this processor. Currently there is a “predicted-not-taken” predictor in your machine with branch prediction accuracy of 25%. In order to optimize the program, which optimization is the best choice in term of speed up if all the instruction takes 1 cycle to execute? () Change the predictor to a 2-bit predictor with branch prediction accuracy of 60%. (b) Change the code and reduce the number of branch instructions by half. (c) Change the processor that has one branch delay slots and the compiler is able to fill 40% of the branch delay slots with useful instructions. (d) None of the above optimization gives better performance than “predicted-not-taken” predictor","libVersion":"0.2.3","langs":"eng"}