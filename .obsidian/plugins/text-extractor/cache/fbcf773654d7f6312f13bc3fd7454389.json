{"path":"Revision/TS/ZealTS/OS/media/Pasted image 20231210121814.png","text":"Answer: (a, b, d) Solution: (a) True. Consider the following livelock situation in a priority scheduler: assume there are three threads T1, T2, and T3 at priorities 1 (highest), 2, and 3 (lowest), and in which T3 has acquired a lock that T1 is sleeping on, with T2 running and effectively preventing T1 from running. This is a priority inversion. Priority donation from T1 to T3 would allow T3 to release the lock and thereby prevent the priority inversion. (b) True. Priority inversion is when a higher priority task waits for a lower priority task to release the critical resource, so a higher priority process is in starvation. (c) False. Priority inversion is very common in single core system. So, itâ€™s a problem with both single & multi-core system. (d) True. Priority inversion would not happen in first come first serve as there would be no priority in the process, so higher priority would not wait for lower priority.","libVersion":"0.2.3","langs":"eng"}